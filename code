# violence_detection_full.py
import cv2
import numpy as np
import argparse
import smtplib
import geocoder
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from tflite_runtime.interpreter import Interpreter
from collections import deque

# ================= Configuration =================
EMAIL_ENABLED = True
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SENDER_EMAIL = 'your_email@gmail.com'
SENDER_PASSWORD = 'your_app_password'  # Use app-specific password
RECIPIENT_EMAIL = 'alert_recipient@example.com'
ALERT_THRESHOLD = 0.3  # 30% violence probability
COOLDOWN_SECONDS = 300  # 5 minutes between alerts

# ================= Helper Functions =================
def get_location():
    """Get approximate location using IP address"""
    try:
        g = geocoder.ip('me')
        return f"{g.city}, {g.state}, {g.country}"
    except:
        return "Location unavailable"

def send_alert(smoothed_pred):
    """Send email alert with location and timestamp"""
    if not EMAIL_ENABLED:
        return

    # Get current time and location
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    location = get_location()

    # Create message
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECIPIENT_EMAIL
    msg['Subject'] = f"Violence Alert Detected - {current_time}"
    
    body = f"""
    Violence Alert System Notification
    
    Detection Details:
    - Time: {current_time}
    - Location: {location}
    - Violence Probability: {smoothed_pred*100:.2f}%
    - Threshold: {ALERT_THRESHOLD*100}%
    
    Immediate action recommended!
    """
    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
        print("Alert email sent successfully!")
    except Exception as e:
        print(f"Email error: {str(e)}")

# ================= Main Detection Function =================
def detect_violence(input_source, model_path):
    # Initialize model
    interpreter = Interpreter(model_path)
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    # Initialize video capture
    cap = cv2.VideoCapture(input_source)
    if not cap.isOpened():
        raise RuntimeError("Cannot open video source")

    Q = deque(maxlen=30)
    last_alert_time = 0

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                break

            # Preprocess frame
            resized = cv2.resize(frame, (128, 128))
            rgb = cv2.cvtColor(resized, cv2.COLOR_BGR2RGB)
            input_data = np.expand_dims(rgb / 255.0, axis=0).astype(np.float32)

            # Inference
            interpreter.set_tensor(input_details[0]['index'], input_data)
            interpreter.invoke()
            pred = interpreter.get_tensor(output_details[0]['index'])[0][0]
            
            Q.append(pred)
            smoothed_pred = np.mean(Q)

            # Check alert condition
            if smoothed_pred > ALERT_THRESHOLD:
                current_time = time.time()
                if (current_time - last_alert_time) > COOLDOWN_SECONDS:
                    send_alert(smoothed_pred)
                    last_alert_time = current_time

            # Display output
            display_text = f"Violence: {smoothed_pred*100:.1f}%"
            cv2.putText(frame, display_text, (10, 30), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7,
                        (0, 0, 255) if smoothed_pred > ALERT_THRESHOLD else (0, 255, 0), 2)
            cv2.imshow('Violence Detection', frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    finally:
        cap.release()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Violence Detection System')
    parser.add_argument('-m', '--mode', choices=['video', 'camera'], required=True,
                       help='Detection mode: "video" or "camera"')
    parser.add_argument('-i', '--input', help='Path to input video file')
    parser.add_argument('--model', default='tflite_model.tflite', help='Path to TFLite model')
    
    args = parser.parse_args()

    input_source = args.input if args.mode == 'video' else 0
    
    try:
        detect_violence(input_source, args.model)
    except Exception as e:
        print(f"Error: {str(e)}")


'''
# Install required packages
pip install geocoder tflite-runtime opencv-python

# For video file
python violence_detection_full.py --mode video --input input.mp4

# For webcam
python violence_detection_full.py --mode camera
'''
